--SELECT GET_DDL('database','EDW')


CREATE OR REPLACE DATABASE EDW;

CREATE OR REPLACE SCHEMA EDW;

CREATE OR REPLACE TABLE COUNTRIES (
	COUNTRY_KEY NUMBER(38,0) AUTOINCREMENT START 1 INCREMENT 1 NOORDER,
	COUNTRY_ID VARCHAR(2),
	COUNTRY_NAME VARCHAR(40),
	REGION_ID NUMBER(38,0),
	MD5_HASH VARCHAR(32),
	EDW_UPDATED_BY VARCHAR(32),
	EDW_CREATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_UPDATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_EFFECTIVE_START_DATE TIMESTAMP_NTZ(9),
	EDW_EFFECTIVE_END_DATE TIMESTAMP_NTZ(9),
	ACTIVE_FLAG VARCHAR(1)
);
CREATE OR REPLACE TABLE DEPARTMENTS (
	DEPARTMENT_KEY NUMBER(38,0) AUTOINCREMENT START 1 INCREMENT 1 NOORDER,
	DEPARTMENT_ID NUMBER(4,0),
	DEPARTMENT_NAME VARCHAR(30),
	MANAGER_ID NUMBER(6,0),
	LOCATION_ID NUMBER(4,0),
	MD5_HASH VARCHAR(32),
	EDW_UPDATED_BY VARCHAR(32),
	EDW_CREATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_UPDATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_EFFECTIVE_START_DATE TIMESTAMP_NTZ(9),
	EDW_EFFECTIVE_END_DATE TIMESTAMP_NTZ(9),
	ACTIVE_FLAG VARCHAR(1)
);
CREATE OR REPLACE TABLE EMPLOYEES (
	EMPLOYEE_KEY NUMBER(38,0) AUTOINCREMENT START 1 INCREMENT 1 NOORDER,
	EMPLOYEE_ID NUMBER(6,0),
	FIRST_NAME VARCHAR(20),
	LAST_NAME VARCHAR(25),
	EMAIL VARCHAR(25),
	PHONE_NUMBER VARCHAR(20),
	HIRE_DATE DATE,
	JOB_ID VARCHAR(10),
	SALARY NUMBER(8,2),
	COMMISSION_PCT NUMBER(2,2),
	MANAGER_ID NUMBER(6,0),
	DEPARTMENT_ID NUMBER(4,0),
	MD5_HASH VARCHAR(32),
	EDW_UPDATED_BY VARCHAR(32),
	EDW_CREATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_UPDATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_EFFECTIVE_START_DATE TIMESTAMP_NTZ(9),
	EDW_EFFECTIVE_END_DATE TIMESTAMP_NTZ(9),
	ACTIVE_FLAG VARCHAR(1)
);
CREATE OR REPLACE DYNAMIC TABLE EMPLPYEE_DETAILS(
	EMPLOYEE_ID,
	JOB_ID,
	MANAGER_ID,
	DEPARTMENT_ID,
	LOCATION_ID,
	COUNTRY_ID,
	FIRST_NAME,
	LAST_NAME,
	SALARY,
	COMMISSION_PCT,
	DEPARTMENT_NAME,
	JOB_TITLE,
	CITY,
	STATE_PROVINCE,
	COUNTRY_NAME,
	REGION_NAME
) LAG = '10 MINUTES' REFRESH_MODE = AUTO INITIALIZE = ON_CREATE WAREHOUSE = COMPUTE_WH
 AS 

 SELECT  
  E.EMPLOYEE_ID,   
  E.JOB_ID,   
  E.MANAGER_ID,   
  E.DEPARTMENT_ID,  
  D.LOCATION_ID,  
  L.COUNTRY_ID,  
  E.FIRST_NAME,  
  E.LAST_NAME,  
  E.SALARY,  
  E.COMMISSION_PCT,  
  D.DEPARTMENT_NAME,  
  J.JOB_TITLE,  
  L.CITY,  
  L.STATE_PROVINCE,  
  C.COUNTRY_NAME,  
  R.REGION_NAME  
FROM  
  EDW.EMPLOYEES E,  
  EDW.DEPARTMENTS D,  
  EDW.JOBS J,  
  EDW.LOCATIONS L,  
  EDW.COUNTRIES C,  
  EDW.REGIONS R  
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID  
  AND D.LOCATION_ID = L.LOCATION_ID  
  AND L.COUNTRY_ID = C.COUNTRY_ID  
  AND C.REGION_ID = R.REGION_ID  
  AND J.JOB_ID = E.JOB_ID
  ORDER BY E.EMPLOYEE_ID
  ;
CREATE OR REPLACE TABLE EMP_DETAILS (
	EMPLOYEE_ID NUMBER(6,0),
	JOB_ID VARCHAR(10),
	MANAGER_ID NUMBER(6,0),
	DEPARTMENT_ID NUMBER(4,0),
	LOCATION_ID NUMBER(4,0),
	COUNTRY_ID VARCHAR(2),
	FIRST_NAME VARCHAR(20),
	LAST_NAME VARCHAR(25),
	SALARY NUMBER(8,2),
	COMMISSION_PCT NUMBER(2,2),
	DEPARTMENT_NAME VARCHAR(30),
	JOB_TITLE VARCHAR(35),
	CITY VARCHAR(30),
	STATE_PROVINCE VARCHAR(25),
	COUNTRY_NAME VARCHAR(40),
	REGION_NAME VARCHAR(25)
);
CREATE OR REPLACE TABLE JOBS (
	JOB_KEY NUMBER(38,0) AUTOINCREMENT START 1 INCREMENT 1 NOORDER,
	JOB_ID VARCHAR(10),
	JOB_TITLE VARCHAR(35),
	MIN_SALARY NUMBER(6,0),
	MAX_SALARY NUMBER(6,0),
	MD5_HASH VARCHAR(32),
	EDW_UPDATED_BY VARCHAR(32),
	EDW_CREATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_UPDATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_EFFECTIVE_START_DATE TIMESTAMP_NTZ(9),
	EDW_EFFECTIVE_END_DATE TIMESTAMP_NTZ(9),
	ACTIVE_FLAG VARCHAR(1)
);
CREATE OR REPLACE TABLE JOB_HISTORY (
	JOB_HISTORY_KEY NUMBER(38,0) AUTOINCREMENT START 1 INCREMENT 1 NOORDER,
	EMPLOYEE_ID NUMBER(6,0),
	START_DATE DATE,
	END_DATE DATE,
	JOB_ID VARCHAR(10),
	DEPARTMENT_ID NUMBER(4,0),
	MD5_HASH VARCHAR(32),
	EDW_UPDATED_BY VARCHAR(32),
	EDW_CREATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_UPDATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_EFFECTIVE_START_DATE TIMESTAMP_NTZ(9),
	EDW_EFFECTIVE_END_DATE TIMESTAMP_NTZ(9),
	ACTIVE_FLAG VARCHAR(1)
);
CREATE OR REPLACE TABLE LOCATIONS (
	LOCATION_KEY NUMBER(38,0) AUTOINCREMENT START 1 INCREMENT 1 NOORDER,
	LOCATION_ID NUMBER(4,0) NOT NULL,
	STREET_ADDRESS VARCHAR(40),
	POSTAL_CODE VARCHAR(12),
	CITY VARCHAR(30),
	STATE_PROVINCE VARCHAR(25),
	COUNTRY_ID VARCHAR(2),
	MD5_HASH VARCHAR(32),
	EDW_UPDATED_BY VARCHAR(32),
	EDW_CREATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_UPDATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_EFFECTIVE_START_DATE TIMESTAMP_NTZ(9),
	EDW_EFFECTIVE_END_DATE TIMESTAMP_NTZ(9),
	ACTIVE_FLAG VARCHAR(1)
);
CREATE OR REPLACE TABLE REGIONS (
	REGION_KEY NUMBER(38,0) AUTOINCREMENT START 1 INCREMENT 1 NOORDER,
	REGION_ID NUMBER(38,0),
	REGION_NAME VARCHAR(25),
	MD5_HASH VARCHAR(32),
	EDW_UPDATED_BY VARCHAR(32),
	EDW_CREATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_UPDATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_EFFECTIVE_START_DATE TIMESTAMP_NTZ(9),
	EDW_EFFECTIVE_END_DATE TIMESTAMP_NTZ(9),
	ACTIVE_FLAG VARCHAR(1)
);
CREATE OR REPLACE TABLE SF_DIMCUSTOMER (
	CUST_ID NUMBER(38,0) AUTOINCREMENT START 1 INCREMENT 1 NOORDER,
	CUST_NAME VARCHAR(50),
	CUST_TYPE VARCHAR(1),
	INSERT_TIMESTAMP TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP(),
	UPDATE_TIMESTAMP TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP(),
	CONSTRAINT PK_DIMCUSTOMER PRIMARY KEY (CUST_ID)
);
CREATE OR REPLACE TABLE SF_ORDERS (
	ORDER_ID NUMBER(38,0) AUTOINCREMENT START 1 INCREMENT 1 NOORDER,
	CUST_ID NUMBER(38,0) NOT NULL,
	TOTAL_AMOUNT NUMBER(38,0),
	INSERT_TIMESTAMP TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP(),
	UPDATE_TIMESTAMP TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP(),
	CONSTRAINT PK_DIMORDERS PRIMARY KEY (ORDER_ID, CUST_ID),
	CONSTRAINT FK_DIMCUSTOMER_DIMORDERS FOREIGN KEY (CUST_ID) REFERENCES EDW.EDW.SF_DIMCUSTOMER(CUST_ID)
);
CREATE OR REPLACE TASK ROOT_TSK_EDW_ALL
	WAREHOUSE=COMPUTE_WH
	SCHEDULE='USING CRON 0 10 * * MON-FRI Asia/Calcutta'
	AS SELECT CURRENT_TIMESTAMP() AS CURRENT_TIME;
CREATE OR REPLACE TASK TSK_EDW_STG_EDW_COUNTRIES
	WAREHOUSE=COMPUTE_WH
	AFTER EDW.EDW.TSK_EDW_STG_EDW_REGION
	AS MERGE INTO EDW.EDW.COUNTRIES AS TGT 
USING EDW.EDW_STG.COUNTRIES AS SRC 
ON TGT.COUNTRY_ID = SRC.COUNTRY_ID

WHEN MATCHED AND TGT.EDW_EFFECTIVE_END_DATE ='9999-12-31 00:00:00.000' AND TGT.COUNTRY_NAME<>SRC.COUNTRY_NAME
AND TGT.REGION_ID<>SRC.REGION_ID
THEN UPDATE SET 
 EDW_EFFECTIVE_END_DATE=CURRENT_TIMESTAMP()
,EDW_UPDATE_TIMESTAMP=CURRENT_TIMESTAMP()
,EDW_UPDATED_BY='EDW'
,ACTIVE_FLAG='N'

WHEN NOT MATCHED THEN INSERT
    (
        COUNTRY_ID,
        COUNTRY_NAME,
		REGION_ID,
        MD5_HASH,
        EDW_UPDATED_BY,
        EDW_CREATE_TIMESTAMP,
        EDW_UPDATE_TIMESTAMP,
        EDW_EFFECTIVE_START_DATE,
        EDW_EFFECTIVE_END_DATE,
        ACTIVE_FLAG
    )
VALUES
    (
        SRC.COUNTRY_ID,
        SRC.COUNTRY_NAME,
		SRC.REGION_ID,
        SRC.MD5_HASH,
        SRC.EDW_UPDATED_BY,
        SRC.EDW_CREATE_TIMESTAMP,
        SRC.EDW_UPDATE_TIMESTAMP,
        CURRENT_TIMESTAMP(),
        '9999-12-31 00:00:00.000',
        'Y'
    );
CREATE OR REPLACE TASK TSK_EDW_STG_EDW_DEPARTMENTS
	WAREHOUSE=COMPUTE_WH
	AFTER EDW.EDW.TSK_EDW_STG_EDW_LOCATIONS
	AS MERGE INTO EDW.EDW.DEPARTMENTS AS TGT 
USING EDW.EDW_STG.DEPARTMENTS AS SRC 
ON TGT.DEPARTMENT_ID = SRC.DEPARTMENT_ID

WHEN MATCHED AND TGT.EDW_EFFECTIVE_END_DATE ='9999-12-31 00:00:00.000' AND TGT.DEPARTMENT_NAME<>SRC.DEPARTMENT_NAME
AND TGT.MANAGER_ID<>SRC.MANAGER_ID AND TGT.LOCATION_ID<>SRC.LOCATION_ID 
THEN UPDATE SET 
 EDW_EFFECTIVE_END_DATE=CURRENT_TIMESTAMP()
,EDW_UPDATE_TIMESTAMP=CURRENT_TIMESTAMP()
,EDW_UPDATED_BY='EDW'
,ACTIVE_FLAG='N'

WHEN NOT MATCHED THEN INSERT
    (
        DEPARTMENT_ID,
        DEPARTMENT_NAME,
		MANAGER_ID,
		LOCATION_ID,
        MD5_HASH,
        EDW_UPDATED_BY,
        EDW_CREATE_TIMESTAMP,
        EDW_UPDATE_TIMESTAMP,
        EDW_EFFECTIVE_START_DATE,
        EDW_EFFECTIVE_END_DATE,
        ACTIVE_FLAG
    )
VALUES
    (
        SRC.DEPARTMENT_ID,
        SRC.DEPARTMENT_NAME,
		SRC.MANAGER_ID,
		SRC.LOCATION_ID,
        SRC.MD5_HASH,
        SRC.EDW_UPDATED_BY,
        SRC.EDW_CREATE_TIMESTAMP,
        SRC.EDW_UPDATE_TIMESTAMP,
        CURRENT_TIMESTAMP(),
        '9999-12-31 00:00:00.000',
        'Y'
    );
CREATE OR REPLACE TASK TSK_EDW_STG_EDW_EMPLOYEES
	WAREHOUSE=COMPUTE_WH
	AFTER EDW.EDW.TSK_EDW_STG_EDW_JOBS
	AS MERGE INTO EDW.EDW.EMPLOYEES AS TGT 
USING EDW.EDW_STG.EMPLOYEES AS SRC 
ON TGT.EMPLOYEE_ID = SRC.EMPLOYEE_ID

WHEN MATCHED AND TGT.EDW_EFFECTIVE_END_DATE ='9999-12-31 00:00:00.000' AND TGT.FIRST_NAME<>SRC.FIRST_NAME
AND TGT.LAST_NAME<>SRC.LAST_NAME AND TGT.EMAIL<>SRC.EMAIL AND TGT.PHONE_NUMBER<>SRC.PHONE_NUMBER  AND TGT.HIRE_DATE<>SRC.HIRE_DATE  AND TGT.JOB_ID<>SRC.JOB_ID 
AND  TGT.SALARY<>SRC.SALARY AND TGT.COMMISSION_PCT<>SRC.COMMISSION_PCT AND TGT.MANAGER_ID<>SRC.MANAGER_ID AND TGT.DEPARTMENT_ID<>SRC.DEPARTMENT_ID
THEN UPDATE SET 
 EDW_EFFECTIVE_END_DATE=CURRENT_TIMESTAMP()
,EDW_UPDATE_TIMESTAMP=CURRENT_TIMESTAMP()
,EDW_UPDATED_BY='EDW'
,ACTIVE_FLAG='N'

WHEN NOT MATCHED THEN INSERT
    (
        EMPLOYEE_ID,
        FIRST_NAME,
		LAST_NAME,
		EMAIL,
		PHONE_NUMBER,
		HIRE_DATE,
        JOB_ID,
        SALARY,
        COMMISSION_PCT,
        MANAGER_ID,
        DEPARTMENT_ID,
        MD5_HASH,
        EDW_UPDATED_BY,
        EDW_CREATE_TIMESTAMP,
        EDW_UPDATE_TIMESTAMP,
        EDW_EFFECTIVE_START_DATE,
        EDW_EFFECTIVE_END_DATE,
        ACTIVE_FLAG
    )
VALUES
    (
        SRC.EMPLOYEE_ID,
        SRC.FIRST_NAME,
		SRC.LAST_NAME,
		SRC.EMAIL,
		SRC.PHONE_NUMBER,
		SRC.HIRE_DATE,
        SRC.JOB_ID,
        SRC.SALARY,
        SRC.COMMISSION_PCT,
        SRC.MANAGER_ID,
        SRC.DEPARTMENT_ID,
        SRC.MD5_HASH,
        SRC.EDW_UPDATED_BY,
        SRC.EDW_CREATE_TIMESTAMP,
        SRC.EDW_UPDATE_TIMESTAMP,
        CURRENT_TIMESTAMP(),
        '9999-12-31 00:00:00.000',
        'Y'
    );
CREATE OR REPLACE TASK TSK_EDW_STG_EDW_JOBS
	WAREHOUSE=COMPUTE_WH
	AFTER EDW.EDW.TSK_EDW_STG_EDW_DEPARTMENTS
	AS MERGE INTO EDW.EDW.JOBS AS TGT 
USING EDW.EDW_STG.JOBS AS SRC 
ON TGT.JOB_ID = SRC.JOB_ID

WHEN MATCHED AND TGT.EDW_EFFECTIVE_END_DATE ='9999-12-31 00:00:00.000' AND TGT.JOB_TITLE<>SRC.JOB_TITLE
AND TGT.MIN_SALARY<>SRC.MIN_SALARY AND TGT.MAX_SALARY<>SRC.MAX_SALARY 
THEN UPDATE SET 
 EDW_EFFECTIVE_END_DATE=CURRENT_TIMESTAMP()
,EDW_UPDATE_TIMESTAMP=CURRENT_TIMESTAMP()
,EDW_UPDATED_BY='EDW'
,ACTIVE_FLAG='N'

WHEN NOT MATCHED THEN INSERT
    (
        JOB_ID,
        JOB_TITLE,
		MIN_SALARY,
		MAX_SALARY,
        MD5_HASH,
        EDW_UPDATED_BY,
        EDW_CREATE_TIMESTAMP,
        EDW_UPDATE_TIMESTAMP,
        EDW_EFFECTIVE_START_DATE,
        EDW_EFFECTIVE_END_DATE,
        ACTIVE_FLAG
    )
VALUES
    (
        SRC.JOB_ID,
        SRC.JOB_TITLE,
		SRC.MIN_SALARY,
		SRC.MAX_SALARY,
        SRC.MD5_HASH,
        SRC.EDW_UPDATED_BY,
        SRC.EDW_CREATE_TIMESTAMP,
        SRC.EDW_UPDATE_TIMESTAMP,
        CURRENT_TIMESTAMP(),
        '9999-12-31 00:00:00.000',
        'Y'
    );
CREATE OR REPLACE TASK TSK_EDW_STG_EDW_JOB_HISTORY
	WAREHOUSE=COMPUTE_WH
	AFTER EDW.EDW.TSK_EDW_STG_EDW_EMPLOYEES
	AS MERGE INTO EDW.EDW.JOB_HISTORY AS TGT 
USING EDW.EDW_STG.JOB_HISTORY AS SRC 
ON TGT.EMPLOYEE_ID = SRC.EMPLOYEE_ID AND TGT.START_DATE = SRC.START_DATE 

WHEN MATCHED AND TGT.EDW_EFFECTIVE_END_DATE ='9999-12-31 00:00:00.000' AND TGT.START_DATE<>SRC.START_DATE
AND TGT.END_DATE<>SRC.END_DATE AND TGT.JOB_ID<>SRC.JOB_ID AND TGT.DEPARTMENT_ID<>SRC.DEPARTMENT_ID
THEN UPDATE SET 
 EDW_EFFECTIVE_END_DATE=CURRENT_TIMESTAMP()
,EDW_UPDATE_TIMESTAMP=CURRENT_TIMESTAMP()
,EDW_UPDATED_BY='EDW'
,ACTIVE_FLAG='N'

WHEN NOT MATCHED THEN INSERT
    (
        EMPLOYEE_ID,
        START_DATE,
		END_DATE,
		JOB_ID,
		DEPARTMENT_ID,
        MD5_HASH,
        EDW_UPDATED_BY,
        EDW_CREATE_TIMESTAMP,
        EDW_UPDATE_TIMESTAMP,
        EDW_EFFECTIVE_START_DATE,
        EDW_EFFECTIVE_END_DATE,
        ACTIVE_FLAG
    )
VALUES
    (
        SRC.EMPLOYEE_ID,
        SRC.START_DATE,
		SRC.END_DATE,
		SRC.JOB_ID,
		SRC.DEPARTMENT_ID,
        SRC.MD5_HASH,
        SRC.EDW_UPDATED_BY,
        SRC.EDW_CREATE_TIMESTAMP,
        SRC.EDW_UPDATE_TIMESTAMP,
        CURRENT_TIMESTAMP(),
        '9999-12-31 00:00:00.000',
        'Y'
    );
CREATE OR REPLACE TASK TSK_EDW_STG_EDW_LOCATIONS
	WAREHOUSE=COMPUTE_WH
	AFTER EDW.EDW.TSK_EDW_STG_EDW_COUNTRIES
	AS MERGE INTO EDW.EDW.LOCATIONS AS TGT 
USING EDW.EDW_STG.LOCATIONS AS SRC 
ON TGT.LOCATION_ID = SRC.LOCATION_ID

WHEN MATCHED AND TGT.EDW_EFFECTIVE_END_DATE ='9999-12-31 00:00:00.000' AND TGT.STREET_ADDRESS<>SRC.STREET_ADDRESS
AND TGT.POSTAL_CODE<>SRC.POSTAL_CODE AND TGT.CITY<>SRC.CITY AND TGT.STATE_PROVINCE<>SRC.STATE_PROVINCE AND TGT.COUNTRY_ID<>SRC.COUNTRY_ID
THEN UPDATE SET 
 EDW_EFFECTIVE_END_DATE=CURRENT_TIMESTAMP()
,EDW_UPDATE_TIMESTAMP=CURRENT_TIMESTAMP()
,EDW_UPDATED_BY='EDW'
,ACTIVE_FLAG='N'

WHEN NOT MATCHED THEN INSERT
    (
        LOCATION_ID,
        STREET_ADDRESS,
		POSTAL_CODE,
		CITY,
		STATE_PROVINCE,
		COUNTRY_ID,
        MD5_HASH,
        EDW_UPDATED_BY,
        EDW_CREATE_TIMESTAMP,
        EDW_UPDATE_TIMESTAMP,
        EDW_EFFECTIVE_START_DATE,
        EDW_EFFECTIVE_END_DATE,
        ACTIVE_FLAG
    )
VALUES
    (
        SRC.LOCATION_ID,
        SRC.STREET_ADDRESS,
		SRC.POSTAL_CODE,
		SRC.CITY,
		SRC.STATE_PROVINCE,
		SRC.COUNTRY_ID,
        SRC.MD5_HASH,
        SRC.EDW_UPDATED_BY,
        SRC.EDW_CREATE_TIMESTAMP,
        SRC.EDW_UPDATE_TIMESTAMP,
        CURRENT_TIMESTAMP(),
        '9999-12-31 00:00:00.000',
        'Y'
    );
CREATE OR REPLACE TASK TSK_EDW_STG_EDW_REGION
	WAREHOUSE=COMPUTE_WH
	AFTER EDW.EDW.ROOT_TSK_EDW_ALL
	AS MERGE INTO EDW.EDW.REGIONS AS TGT 
USING EDW.EDW_STG.REGIONS AS SRC 
ON TGT.REGION_ID = SRC.REGION_ID

WHEN MATCHED AND TGT.EDW_EFFECTIVE_END_DATE ='9999-12-31 00:00:00.000' AND TGT.REGION_NAME<>SRC.REGION_NAME
THEN UPDATE SET 
 EDW_EFFECTIVE_END_DATE=CURRENT_TIMESTAMP()
,EDW_UPDATE_TIMESTAMP=CURRENT_TIMESTAMP()
,EDW_UPDATED_BY='EDW'
,ACTIVE_FLAG='N'

WHEN NOT MATCHED THEN INSERT
    (
        REGION_ID,
        REGION_NAME,
        MD5_HASH,
        EDW_UPDATED_BY,
        EDW_CREATE_TIMESTAMP,
        EDW_UPDATE_TIMESTAMP,
        EDW_EFFECTIVE_START_DATE,
        EDW_EFFECTIVE_END_DATE,
        ACTIVE_FLAG
    )
VALUES
    (
        SRC.REGION_ID,
        SRC.REGION_NAME,
        SRC.MD5_HASH,
        SRC.EDW_UPDATED_BY,
        SRC.EDW_CREATE_TIMESTAMP,
        SRC.EDW_UPDATE_TIMESTAMP,
        CURRENT_TIMESTAMP(),
        '9999-12-31 00:00:00.000',
        'Y'
    );
CREATE OR REPLACE SCHEMA EDW_EXTR;

CREATE OR REPLACE VIEW EMP_DETAILS_VIEW(
	EMPLOYEE_ID,
	JOB_ID,
	MANAGER_ID,
	DEPARTMENT_ID,
	LOCATION_ID,
	COUNTRY_ID,
	FIRST_NAME,
	LAST_NAME,
	SALARY,
	COMMISSION_PCT,
	DEPARTMENT_NAME,
	JOB_TITLE,
	CITY,
	STATE_PROVINCE,
	COUNTRY_NAME,
	REGION_NAME
) AS 
  SELECT  
  E.EMPLOYEE_ID,   
  E.JOB_ID,   
  E.MANAGER_ID,   
  E.DEPARTMENT_ID,  
  D.LOCATION_ID,  
  L.COUNTRY_ID,  
  E.FIRST_NAME,  
  E.LAST_NAME,  
  E.SALARY,  
  E.COMMISSION_PCT,  
  D.DEPARTMENT_NAME,  
  J.JOB_TITLE,  
  L.CITY,  
  L.STATE_PROVINCE,  
  C.COUNTRY_NAME,  
  R.REGION_NAME  
FROM  
  EDW.EMPLOYEES E,  
  EDW.DEPARTMENTS D,  
  EDW.JOBS J,  
  EDW.LOCATIONS L,  
  EDW.COUNTRIES C,  
  EDW.REGIONS R  
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID  
  AND D.LOCATION_ID = L.LOCATION_ID  
  AND L.COUNTRY_ID = C.COUNTRY_ID  
  AND C.REGION_ID = R.REGION_ID  
  AND J.JOB_ID = E.JOB_ID;
CREATE OR REPLACE SCHEMA EDW_STG;

CREATE OR REPLACE TABLE COUNTRIES (
	COUNTRY_ID VARCHAR(2),
	COUNTRY_NAME VARCHAR(40),
	REGION_ID NUMBER(38,0),
	MD5_HASH VARCHAR(32),
	EDW_UPDATED_BY VARCHAR(32),
	EDW_CREATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_UPDATE_TIMESTAMP TIMESTAMP_NTZ(9)
);
CREATE OR REPLACE TABLE DEPARTMENTS (
	DEPARTMENT_ID NUMBER(4,0),
	DEPARTMENT_NAME VARCHAR(30),
	MANAGER_ID NUMBER(6,0),
	LOCATION_ID NUMBER(4,0),
	MD5_HASH VARCHAR(32),
	EDW_UPDATED_BY VARCHAR(32),
	EDW_CREATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_UPDATE_TIMESTAMP TIMESTAMP_NTZ(9)
);
CREATE OR REPLACE TABLE EMPLOYEE (
	EMPLOYEE_ID NUMBER(38,0),
	NAME VARCHAR(50),
	EXPERIENCE_YEARS NUMBER(38,0)
);
CREATE OR REPLACE TABLE EMPLOYEES (
	EMPLOYEE_ID NUMBER(6,0),
	FIRST_NAME VARCHAR(20),
	LAST_NAME VARCHAR(25),
	EMAIL VARCHAR(25),
	PHONE_NUMBER VARCHAR(20),
	HIRE_DATE DATE,
	JOB_ID VARCHAR(10),
	SALARY NUMBER(8,2),
	COMMISSION_PCT NUMBER(2,2),
	MANAGER_ID NUMBER(6,0),
	DEPARTMENT_ID NUMBER(4,0),
	MD5_HASH VARCHAR(32),
	EDW_UPDATED_BY VARCHAR(32),
	EDW_CREATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_UPDATE_TIMESTAMP TIMESTAMP_NTZ(9)
);
CREATE OR REPLACE TABLE JOBS (
	JOB_ID VARCHAR(10),
	JOB_TITLE VARCHAR(35),
	MIN_SALARY NUMBER(6,0),
	MAX_SALARY NUMBER(6,0),
	MD5_HASH VARCHAR(32),
	EDW_UPDATED_BY VARCHAR(32),
	EDW_CREATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_UPDATE_TIMESTAMP TIMESTAMP_NTZ(9)
);
CREATE OR REPLACE TABLE JOB_HISTORY (
	EMPLOYEE_ID NUMBER(6,0),
	START_DATE DATE,
	END_DATE DATE,
	JOB_ID VARCHAR(10),
	DEPARTMENT_ID NUMBER(4,0),
	MD5_HASH VARCHAR(32),
	EDW_UPDATED_BY VARCHAR(32),
	EDW_CREATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_UPDATE_TIMESTAMP TIMESTAMP_NTZ(9)
);
CREATE OR REPLACE TABLE LOCATIONS (
	LOCATION_ID NUMBER(4,0) NOT NULL,
	STREET_ADDRESS VARCHAR(40),
	POSTAL_CODE VARCHAR(12),
	CITY VARCHAR(30),
	STATE_PROVINCE VARCHAR(25),
	COUNTRY_ID VARCHAR(2),
	MD5_HASH VARCHAR(32),
	EDW_UPDATED_BY VARCHAR(32),
	EDW_CREATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_UPDATE_TIMESTAMP TIMESTAMP_NTZ(9)
);
CREATE OR REPLACE TABLE PROJECT (
	PROJECT_ID NUMBER(38,0),
	EMPLOYEE_ID NUMBER(38,0)
);
CREATE OR REPLACE TABLE REGIONS (
	REGION_ID NUMBER(38,0),
	REGION_NAME VARCHAR(25),
	MD5_HASH VARCHAR(32),
	EDW_UPDATED_BY VARCHAR(32),
	EDW_CREATE_TIMESTAMP TIMESTAMP_NTZ(9),
	EDW_UPDATE_TIMESTAMP TIMESTAMP_NTZ(9)
);
CREATE OR REPLACE TABLE SF_LINEITEM (
	L_ORDERKEY VARCHAR(255),
	L_PARTKEY VARCHAR(255),
	L_SUPPKEY VARCHAR(255),
	L_LINENUMBER VARCHAR(255),
	L_QUANTITY VARCHAR(255),
	L_EXTENDEDPRICE VARCHAR(255),
	L_DISCOUNT VARCHAR(255),
	L_TAX VARCHAR(255),
	L_RETURNFLAG VARCHAR(255),
	L_LINESTATUS VARCHAR(255),
	L_SHIPDATE VARCHAR(255),
	L_COMMITDATE VARCHAR(255),
	L_RECEIPTDATE VARCHAR(255),
	L_SHIPINSTRUCT VARCHAR(255),
	L_SHIPMODE VARCHAR(255),
	L_COMMENT VARCHAR(255)
);
CREATE OR REPLACE TABLE SF_LINE_ITEM_4_SEP_24_PT (
	L_ORDERKEY VARCHAR(256),
	L_PARTKEY VARCHAR(256),
	L_SUPPKEY VARCHAR(256),
	L_LINENUMBER VARCHAR(256),
	L_QUANTITY VARCHAR(256),
	L_EXTENDEDPRICE VARCHAR(256),
	L_DISCOUNT VARCHAR(256),
	L_TAX VARCHAR(256),
	L_RETURNFLAG VARCHAR(256),
	L_LINESTATUS VARCHAR(256),
	L_SHIPDATE VARCHAR(256),
	L_COMMITDATE VARCHAR(256),
	L_RECEIPTDATE VARCHAR(256),
	L_SHIPINSTRUCT VARCHAR(256),
	L_SHIPMODE VARCHAR(256),
	L_COMMENT VARCHAR(256)
);
CREATE OR REPLACE SCHEMA EDW_TEST;

CREATE OR REPLACE TABLE EMPLOYEE (
	EMPLOYEE_ID NUMBER(38,0),
	NAME VARCHAR(50),
	EXPERIENCE_YEARS NUMBER(38,0)
);
CREATE OR REPLACE TABLE PROJECT (
	PROJECT_ID NUMBER(38,0),
	EMPLOYEE_ID NUMBER(38,0)
);
CREATE OR REPLACE TABLE SALES_2020 (
	YEAR NUMBER(38,0),
	CUSTOMER VARCHAR(20),
	PRODUCT VARCHAR(20),
	QTY NUMBER(38,0),
	AMT NUMBER(38,0)
);
CREATE OR REPLACE TABLE SALES_2021 (
	YEAR NUMBER(38,0),
	CUSTOMER VARCHAR(20),
	PRODUCT VARCHAR(20),
	QTY NUMBER(38,0),
	AMT NUMBER(38,0)
);
CREATE OR REPLACE SCHEMA PUBLIC;
